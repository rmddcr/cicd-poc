name: 'provision-dev-env'

on: 
  workflow_dispatch:
    inputs:
      env_name:
        description: 'ENV Name'     
        required: true
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'


jobs:
  provision:
    name: 'Provision Development Environment'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
#     env:
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       AWS_DEFAULT_REGION: 'us-west-2'

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - uses: aws-actions/setup-sam@v1
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -var="env_name=${{ github.event.inputs.env_name }}"
      
    - name: Terraform Destroy
      run: terraform destroy -auto-approve -var="env_name=${{ github.event.inputs.env_name }}"
